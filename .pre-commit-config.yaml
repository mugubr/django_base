# Pre-commit Hooks Configuration
# Configuração de Hooks Pre-commit
#
# This file configures pre-commit hooks to run automatically before each commit.
# Este arquivo configura hooks pre-commit para executar automaticamente antes de cada commit.
#
# Install: pre-commit install
# Run manually: pre-commit run --all-files
# Update hooks: pre-commit autoupdate

repos:
  # Ruff - Fast Python linter and formatter (replaces Black, isort, flake8, etc.)
  # Ruff - Linter e formatador Python rápido (substitui Black, isort, flake8, etc.)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.13.2 # Use the latest version / Use a versão mais recente
    hooks:
      # Ruff linter with auto-fix
      # Linter Ruff com correção automática
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        name: Ruff Linter (Python)
        description: Run Ruff linter with auto-fix

      # Ruff formatter (replaces Black)
      # Formatador Ruff (substitui Black)
      - id: ruff-format
        name: Ruff Format (Python)
        description: Format Python code with Ruff

  # General Pre-commit Hooks / Hooks Gerais do Pre-commit
  # Quality of life improvements and common fixes
  # Melhorias de qualidade de vida e correções comuns
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Remove trailing whitespace / Remove espaços em branco no final
      - id: trailing-whitespace
        name: Trim Trailing Whitespace
        description: Remove trailing whitespace from files
        args: [--markdown-linebreak-ext=md]

      # Ensure files end with newline / Garante que arquivos terminem com nova linha
      - id: end-of-file-fixer
        name: Fix End of Files
        description: Ensure files end with a newline

      # Check YAML syntax / Verifica sintaxe YAML
      # - id: check-yaml
      #   name: Check YAML
      #   description: Validate YAML file syntax
      #   args: [--safe]

      # Check JSON syntax / Verifica sintaxe JSON
      - id: check-json
        name: Check JSON
        description: Validate JSON file syntax

      # Check TOML syntax / Verifica sintaxe TOML
      - id: check-toml
        name: Check TOML
        description: Validate TOML file syntax (pyproject.toml)

      # Prevent large files from being committed / Previne commit de arquivos grandes
      - id: check-added-large-files
        name: Check for Large Files
        description: Prevent files larger than 500KB from being committed
        args: ["--maxkb=500"]

      # Check for merge conflicts / Verifica conflitos de merge
      - id: check-merge-conflict
        name: Check for Merge Conflicts
        description: Detect merge conflict markers in files

      # Detect private keys / Detecta chaves privadas
      - id: detect-private-key
        name: Detect Private Keys
        description: Prevent committing private keys

      # Check for case conflicts / Verifica conflitos de case
      - id: check-case-conflict
        name: Check Case Conflict
        description: Check for files with case-conflicting names

      # Check for broken symlinks / Verifica symlinks quebrados
      - id: check-symlinks
        name: Check Symlinks
        description: Check for broken symlinks

      # Check executables have shebangs / Verifica se executáveis têm shebangs
      - id: check-executables-have-shebangs
        name: Check Executables
        description: Ensure executables have proper shebangs

      # Check shebang scripts are executable / Verifica se scripts com shebang são executáveis
      # - id: check-shebang-scripts-are-executable
      #   name: Check Shebang Scripts
      #   description: Ensure scripts with shebangs are executable

      # Prevent committing to main/master branch / Previne commits diretos em main/master
      - id: no-commit-to-branch
        name: Protect Main Branches
        description: Prevent direct commits to main/master branches
        args: ["--branch", "main", "--branch", "master"]

      # Fix Python encoding pragma / Corrige pragma de encoding Python
      - id: fix-encoding-pragma
        name: Fix Encoding Pragma
        description: Remove or add Python encoding pragma
        args: ["--remove"]

      # Check for debugger imports / Verifica imports de debugger
      - id: debug-statements
        name: Check Debug Statements
        description: Detect debug statements (pdb, ipdb, etc.)

      # Mixed line endings / Endings de linha misturados
      - id: mixed-line-ending
        name: Fix Mixed Line Endings
        description: Ensure consistent line endings
        args: ["--fix=lf"]

  # Security Checks with Bandit / Verificações de Segurança com Bandit
  # Scans Python code for common security issues
  # Escaneia código Python para problemas comuns de segurança
  # - repo: https://github.com/PyCQA/bandit
  #   rev: "1.7.5"
  #   hooks:
  #     - id: bandit
  #       name: Bandit Security Linter
  #       description: Security-focused linter for Python code
  #       args: ["-c", "pyproject.toml"]
  #       additional_dependencies: ["bandit[toml]"]
  #       exclude: ^tests/

  # Secret Detection / Detecção de Secrets
  # Prevents accidentally committing secrets and credentials
  # Previne commit acidental de secrets e credenciais
  # - repo: https://github.com/Yelp/detect-secrets
  #   rev: v1.4.0
  #   hooks:
  #     - id: detect-secrets
  #       name: Detect Secrets
  #       description: Detect secrets in code and prevent commits
  #       args: ["--baseline", ".secrets.baseline"]
  #       exclude: (poetry\.lock|package-lock\.json|yarn\.lock|uv\.lock)

  # Django-specific Checks / Verificações Específicas do Django
  # Check for Django migrations issues
  # Verifica problemas em migrations do Django
  # - repo: https://github.com/adamchainz/django-upgrade
  #   rev: "1.15.0"
  #   hooks:
  #     - id: django-upgrade
  #       name: Django Upgrade
  #       description: Upgrade Django code to newer versions
  #       args: ["--target-version", "5.2"]

  # Markdown Linting / Linting de Markdown
  # Ensures consistent markdown formatting
  # Garante formatação consistente de markdown
  # - repo: https://github.com/igorshubovych/markdownlint-cli
  #   rev: v0.37.0
  #   hooks:
  #     - id: markdownlint
  #       name: Markdown Lint
  #       description: Lint markdown files for consistency
  #       args: ["--fix"]

  # YAML Formatting / Formatação YAML
  # Format YAML files consistently
  # Formata arquivos YAML de forma consistente
  # - repo: https://github.com/pre-commit/mirrors-prettier
  #   rev: v3.1.0
  #   hooks:
  #     - id: prettier
  #       name: Prettier (YAML, JSON, Markdown)
  #       description: Format YAML, JSON, and Markdown files
  #       types_or: [yaml, json, markdown]
  #       args: ["--write", "--prose-wrap", "always"]

  # Docker Linting / Linting de Docker
  # Lint Dockerfiles for best practices
  # Verifica Dockerfiles seguindo melhores práticas
  # - repo: https://github.com/hadolint/hadolint
  #   rev: v2.12.0
  #   hooks:
  #     - id: hadolint
  #       name: Hadolint (Dockerfile)
  #       description: Lint Dockerfiles for best practices
  #       args: ["--ignore", "DL3008", "--ignore", "DL3013"]

  # Shell Script Linting / Linting de Scripts Shell
  # Check shell scripts for common issues
  # Verifica scripts shell para problemas comuns
  # - repo: https://github.com/shellcheck-py/shellcheck-py
  #   rev: v0.9.0.6
  #   hooks:
  #     - id: shellcheck
  #       name: ShellCheck
  #       description: Lint shell scripts for common issues
# Configuration for specific hooks / Configuração para hooks específicos
# Add this to pyproject.toml:
# Adicione isso ao pyproject.toml:
#
# [tool.bandit]
# exclude_dirs = ["tests", "migrations", ".venv"]
# skips = ["B101"]  # assert_used - ok in tests
#
# [tool.detect-secrets]
# exclude_files = "uv.lock|.*\.svg$"
