name: Django Base CI Pipeline / Pipeline de CI do Django Base

# Triggers: Runs this pipeline on every push or pull request to the master and develop branches
# Gatilhos: Roda este pipeline em todo push ou pull request para as branches master e develop
on:
  push:
    branches: ["master", "develop"]
  pull_request:
    branches: ["master", "develop"]

jobs:
  build:
    # The pipeline will run on a Linux (Ubuntu) virtual machine
    # O pipeline rodará em uma máquina virtual Linux (Ubuntu)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      # Django Settings Module - Use development settings for CI
      # Módulo de Settings Django - Usa settings de desenvolvimento para CI
      DJANGO_SETTINGS_MODULE: "django_base.settings.dev"

      # Provide a dummy secret key for the Django application to initialize during tests
      # Fornece uma chave secreta falsa para a aplicação Django inicializar durante os testes
      SECRET_KEY: "django-ci-test-key-1234567890-abcdefghijklmnopqrstuvwxyz-0987654321"

      DEBUG: "False"
      ALLOWED_HOSTS: "localhost,127.0.0.1"
      POSTGRES_DB: "test_db"
      POSTGRES_USER: "test_user"
      POSTGRES_PASSWORD: "test_password"
      POSTGRES_HOST: 127.0.0.1
      POSTGRES_PORT: 5432
      CORS_ALLOWED_ORIGINS: "http://localhost:3000"
      CSRF_TRUSTED_ORIGINS: "http://localhost:3000,http://localhost:8000"

      # Redis configuration for CI (use localhost since service will be added)
      # Configuração Redis para CI (usa localhost pois serviço será adicionado)
      REDIS_URL: "redis://localhost:6379/0"
      REDIS_HOST: "localhost"
      REDIS_PORT: "6379"

    steps:
      # Step 1: Clones your repository into the virtual machine
      # Passo 1: Clona seu repositório para dentro da máquina virtual
      - name: Code checkout / Checkout do código
        uses: actions/checkout@v4

      # Step 2: Sets up the Python environment
      # Passo 2: Configura o ambiente Python
      - name: Configure Python 3.13 / Configurar Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      # Step 3: Sets up uv
      # Passo 3: Configura o uv
      - name: Configure uv / Configurar uv
        uses: astral-sh/setup-uv@v1

      # Step 4: Install development dependencies
      # uv will use caching automatically to speed up future builds
      # Passo 4: Instala as dependências de desenvolvimento
      # O uv usará o cache automaticamente para acelerar builds futuros
      - name: Install dependencies / Instalar dependências
        run: |
          uv venv --python 3.13
          source .venv/bin/activate
          uv pip install -e .[dev]

      # Step 5: Run Ruff to check formatting and linting
      # The --check flag does not modify files, it just fails if they are not formatted
      # Passo 5: Rodar o Ruff para verificar a formatação e o linting
      # A flag --check não altera os arquivos, apenas falha se não estiverem formatados
      - name: Verify formatting with Ruff / Verificar formatação com Ruff
        run: .venv/bin/ruff format --check . --exclude .claude
      - name: Verify linting with Ruff / Verificar linting com Ruff
        run: .venv/bin/ruff check . --exclude .claude

      # Step 6: Run tests with coverage
      # Tests run against PostgreSQL service configured above
      # Passo 6: Rodar os testes com coverage
      # Testes rodam contra o serviço PostgreSQL configurado acima
      - name: Run tests and generate coverage / Rodar testes e gerar cobertura
        run: |
          export PYTHONPATH="${{ github.workspace }}/src"
          .venv/bin/coverage run --source='src' manage.py test core.tests --verbosity=2

      # Step 7: Generate coverage report
      # Shows which lines are covered and the overall percentage
      # Passo 7: Gerar relatório de cobertura
      # Mostra quais linhas estão cobertas e a porcentagem geral
      - name: Generate coverage report / Gerar relatório de cobertura
        run: |
          export PYTHONPATH="${{ github.workspace }}/src"
          .venv/bin/coverage report -m

      # Step 8: Upload coverage to artifacts (optional)
      # Passo 8: Fazer upload da cobertura para artifacts (opcional)
      - name: Upload coverage data / Upload dados de cobertura
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            .coverage
            htmlcov/
          retention-days: 7
